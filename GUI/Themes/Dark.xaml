<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <!--#region Color definitions-->
    <Color x:Key="SelectionBorder">#ffffff</Color>
    <SolidColorBrush x:Key="SelectionBorderBrush" Color="{DynamicResource SelectionBorder}" />

    <Color x:Key="NormalText">#ffffff</Color>
    <SolidColorBrush x:Key="NormalTextBrush" Color="{DynamicResource NormalText}"/>

    <Color x:Key="HighlightText">#47A8F7</Color>
    <SolidColorBrush x:Key="HighlightTextBrush" Color="{DynamicResource HighlightText}"/>

    <Color x:Key="WindowBackground">#222</Color>
    <SolidColorBrush x:Key="WindowBackgroundBrush" Color="{DynamicResource WindowBackground}"/>

    <Color x:Key="ContentBackground">#334</Color>
    <SolidColorBrush x:Key="ContentBackgroundBrush" Color="{DynamicResource ContentBackground}"/>

    <Color x:Key="SelectedTabHighlight">#3A86C3</Color>
    <SolidColorBrush x:Key="SelectedTabHighlightBrush" Color="{DynamicResource SelectedTabHighlight}"/>

    <Color x:Key="GroupBoxOutline">#3A86C3</Color>
    <SolidColorBrush x:Key="GroupBoxOutlineBrush" Color="{DynamicResource GroupBoxOutline}"/>

    <Color x:Key="TextBoxOutline">#30CCCCCC</Color>
    <SolidColorBrush x:Key="TextBoxOutlineBrush" Color="{DynamicResource TextBoxOutline}"/>

    <Color x:Key="HighlightButtonBackground">#3A86C3</Color>
    <SolidColorBrush x:Key="HighlightButtonBackgroundBrush" Color="{DynamicResource HighlightButtonBackground}"/>

    <Color x:Key="HighlightButtonMouseOverBackground">#69A1CE</Color>
    <SolidColorBrush x:Key="HighlightButtonMouseOverBackgroundBrush" Color="{DynamicResource HighlightButtonMouseOverBackground}"/>

    <Color x:Key="HighlightButtonClickedBackground">#2E75AE</Color>
    <SolidColorBrush x:Key="HighlightButtonClickedBackgroundBrush" Color="{DynamicResource HighlightButtonClickedBackground}"/>

    <Color x:Key="HighlightButtonDisabledBackground">#FF5E5E5E</Color>
    <SolidColorBrush x:Key="HighlightButtonDisabledBackgroundBrush" Color="{DynamicResource HighlightButtonDisabledBackground}"/>

    <Color x:Key="NormalButtonBackground">#B5B5B5</Color>
    <SolidColorBrush x:Key="NormalButtonBackgroundBrush" Color="{DynamicResource NormalButtonBackground}"/>

    <Color x:Key="NormalButtonMouseOverBackground">#C8C8C8</Color>
    <SolidColorBrush x:Key="NormalButtonMouseOverBackgroundBrush" Color="{DynamicResource NormalButtonMouseOverBackground}"/>

    <Color x:Key="NormalButtonClickedBackground">#33333C</Color>
    <SolidColorBrush x:Key="NormalButtonClickedBackgroundBrush" Color="{DynamicResource NormalButtonClickedBackground}"/>
    <!--#endregion-->

    <!--#region Component definitions-->

    <Style TargetType="Window">
        <Setter Property="Background" Value="{DynamicResource WindowBackgroundBrush}"/>
    </Style>

    <Style TargetType="ListBox">
        <Setter Property="Background" Value="{DynamicResource ContentBackgroundBrush}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
    </Style>

    <Style TargetType="Label">
        <Setter Property="Foreground" Value="{DynamicResource NormalTextBrush}"/>
    </Style>

    <Style TargetType="TabItem">
        <Setter Property="Background" Value="{DynamicResource ContentBackgroundBrush}"/>
        <Setter Property="Foreground" Value="{DynamicResource NormalTextBrush}"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TabItem">
                    <Border x:Name="Border" 
                            Margin="0,0,0,0"
                            Padding="10,2,10,0" 
                            Background="{TemplateBinding Background}" 
                            BorderThickness="2,2,2,0" 
                            CornerRadius="2,2,0,0" 
                            VerticalAlignment="Bottom">
                        <ContentPresenter ContentSource="Header" RecognizesAccessKey="True" VerticalAlignment="Bottom" TextElement.FontSize="15"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource SelectedTabHighlightBrush}"/>
                            <Setter TargetName="Border" Property="Padding" Value="10,4,10,2"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="HighlightButton" TargetType="Button">
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Background" Value="{DynamicResource HighlightButtonBackgroundBrush}"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="FontSize" Value="15"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="Border" CornerRadius="5" Padding="10" Background="{TemplateBinding Background}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource HighlightButtonMouseOverBackgroundBrush}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{DynamicResource HighlightButtonClickedBackgroundBrush}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="{DynamicResource HighlightButtonDisabledBackgroundBrush}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="Button">
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Background" Value="{DynamicResource NormalButtonBackgroundBrush}"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="FontSize" Value="15"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="Border" CornerRadius="5" Padding="10" Background="{TemplateBinding Background}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource NormalButtonMouseOverBackgroundBrush}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{DynamicResource NormalButtonClickedBackgroundBrush}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="{DynamicResource HighlightButtonDisabledBackgroundBrush}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="IconButton" TargetType="Button">
        <Setter Property="Background" Value="#00000000"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="Transparent">
                        <Grid Background="Transparent">
                            <Path x:Name="ButtonPath" Stroke="{DynamicResource NormalTextBrush}" StrokeThickness="1.25" Data="{TemplateBinding Content}"
                                  Stretch="Uniform"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="ButtonPath" Property="Stroke" Value="White"/>
                            <Setter TargetName="ButtonPath" Property="StrokeThickness" Value="2.5"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <BorderGapMaskConverter x:Key="BorderGapMaskConverter"/>
    <Style TargetType="GroupBox">
        <Setter Property="Foreground" Value="{DynamicResource NormalTextBrush}"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="BorderThickness" Value="2" />
        <Setter Property="BorderBrush" Value="{DynamicResource GroupBoxOutlineBrush}" />

        <!--#region Workaround for double-bordered group boxes -->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GroupBox}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="4"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="4"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="4"/>
                        </Grid.RowDefinitions>
                        <Border CornerRadius="4" Grid.Row="1" Grid.RowSpan="3" Grid.Column="0" Grid.ColumnSpan="4"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    BorderBrush="Transparent"
                                    Background="{TemplateBinding Background}"/>
                        <!-- ContentPresenter for the header -->
                        <Border x:Name="Header" Padding="6,0,6,0" Grid.Row="0" Grid.RowSpan="2" Grid.Column="1">
                            <ContentPresenter ContentSource="Header" RecognizesAccessKey="True" />
                        </Border>
                        <!-- Primary content for GroupBox -->
                        <ContentPresenter Grid.Row="2" Grid.Column="1" Grid.ColumnSpan="2" Margin="{TemplateBinding Padding}"/>
                        <Border CornerRadius="5" Grid.Row="1" Grid.RowSpan="3" Grid.ColumnSpan="4"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    BorderBrush="{TemplateBinding BorderBrush}">
                            <Border.OpacityMask>
                                <MultiBinding Converter="{StaticResource BorderGapMaskConverter}" ConverterParameter="6">
                                    <Binding ElementName="Header"  Path="ActualWidth"/>
                                    <Binding RelativeSource="{RelativeSource Self}" Path="ActualWidth"/>
                                    <Binding RelativeSource="{RelativeSource Self}" Path="ActualHeight"/>
                                </MultiBinding>
                            </Border.OpacityMask>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <!--#endregion-->
    </Style>

    <Style TargetType="TextBox">
        <Setter Property="Padding" Value="5"/>
        <Setter Property="Foreground" Value="{DynamicResource NormalTextBrush}"/>
        <Setter Property="CaretBrush" Value="{DynamicResource NormalTextBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TextBox">
                    <Border CornerRadius="3" Background="{DynamicResource ContentBackgroundBrush}" BorderThickness="2" BorderBrush="{DynamicResource TextBoxOutlineBrush}">
                        <ScrollViewer Margin="0" x:Name="PART_ContentHost" TextElement.Foreground="{DynamicResource NormalTextBrush}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="20" />
            </Grid.ColumnDefinitions>
            <Border x:Name="Border"
                    Grid.ColumnSpan="2"
                    CornerRadius="2"
                    BorderThickness="2"
                    BorderBrush="{DynamicResource TextBoxOutlineBrush}"
                    Background="{DynamicResource ContentBackgroundBrush}"/>
            <Border Grid.Column="0"
                    CornerRadius="2"
                    Margin="2"
                    Background="{DynamicResource ContentBackgroundBrush}"/>
            <Path x:Name="Arrow"
                  Grid.Column="1"
                  HorizontalAlignment="Center"
                  VerticalAlignment="Center"
                  Data="M 0 0 L 4 4 L 8 0 Z" 
                  Fill="{DynamicResource NormalTextBrush}"/>
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="ComboBoxTextBox" TargetType="{x:Type TextBox}">
        <Border x:Name="PART_ContentHost" Focusable="False" Background="{TemplateBinding Background}"/>
    </ControlTemplate>

    <Style x:Key="{x:Type ComboBox}" TargetType="{x:Type ComboBox}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="true" />
        <Setter Property="MinWidth" Value="120" />
        <Setter Property="MinHeight" Value="20" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid>
                        <ToggleButton x:Name="ToggleButton"
                                      Template="{StaticResource ComboBoxToggleButton}"
                                      Focusable="false"
                                      ClickMode="Press"
                                      IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                      />
                        <ContentPresenter x:Name="ContentSite"
                                          IsHitTestVisible="False"
                                          Content="{TemplateBinding SelectionBoxItem}"
                                          ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                          ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                          Margin="7"
                                          VerticalAlignment="Center"
                                          HorizontalAlignment="Left"/>
                        <TextBox x:Name="PART_EditableTextBox"
                                 Style="{x:Null}"
                                 Template="{StaticResource ComboBoxTextBox}"
                                 HorizontalAlignment="Left"
                                 VerticalAlignment="Bottom"
                                 Margin="3"
                                 Focusable="True"
                                 Background="{DynamicResource ContentBackgroundBrush}"
                                 Visibility="Collapsed"
                                 IsReadOnly="{TemplateBinding IsReadOnly}" />
                        <Popup x:Name="Popup"
                               Placement="Bottom"
                               IsOpen="{TemplateBinding IsDropDownOpen}"
                               AllowsTransparency="True"
                               Focusable="False"
                               PopupAnimation="Slide">
                            <Grid x:Name="DropDown"
                                  SnapsToDevicePixels="True"
                                  MinWidth="{TemplateBinding ActualWidth}"
                                  MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                <Border x:Name="DropDownBorder"
                                        BorderThickness="1"
                                        BorderBrush="{DynamicResource TextBoxOutlineBrush}"
                                        Background="{DynamicResource ContentBackgroundBrush}">
                                </Border>
                                <ScrollViewer Margin="4,6,4,6" SnapsToDevicePixels="True">
                                    <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95" />
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false" />
                        </Trigger>
                        <Trigger SourceName="Popup" Property="AllowsTransparency" Value="true">
                            <Setter TargetName="DropDownBorder" Property="CornerRadius" Value="4" />
                            <Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type ComboBoxItem}"
           TargetType="{x:Type ComboBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border x:Name="Border"
                            SnapsToDevicePixels="true"
                            Background="Transparent">
                        <ContentPresenter />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource HighlightButtonBackgroundBrush}"/>
                            <Setter TargetName="Border" Property="BorderThickness" Value="0"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->
</ResourceDictionary>